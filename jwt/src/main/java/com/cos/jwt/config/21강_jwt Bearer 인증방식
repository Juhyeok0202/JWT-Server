*Sta

우선, [httpBasic().disable() 이해가 우선!!]
(이거 이해하면 .addFilter(corsFilter)는 자연스럽게 따라오는 지식!!)

기본적으로
클라이언트가 id,pw를 날려 로그인 최초 요청이 일어나면,
서버는 세션이라는 메모리 영역에 세션ID를 하나 만듬,
그리고 그 만들어진 세션id만의 영역을 만들어 준다.

이렇게 만들고 나서,
응답을 어떻게 해주느냐면,
ID,PW가 정상이면, 세션에 유저 객체를 저장하고 나서 세션 ID를 돌려줌.
클라이언트에게 돌려줄때,
이 클라이언트가 WebBrowser로 요청을 하잖아? 그래서
우리가 특별한 것을 하지 않아도 자기 웹브라우저 앞 프로그램에 쿠키라는 영역에
세션ID를 저장함.

그 다음 새로운 요청이 일어나면,
이 쿠키영역에 있는 세션ID를 들고감. 그럼 서버는 받은 세션ID가 있는지 확인
=> 이것이 세션 로그인 방식

하지만, 세션 방식에는 한계점이 존재!!!!
=>>>>> 서버가 하나일 때는 괜찮은데, 서버가 여러 개가 생기면 안좋음
왜냐하면, 서버가 자신만의 세션 영역을 따로 가지고 있기 떄문.
또 안좋은 점이 뭐냐하면,
ajax같은거 쓰면, 클라이언트가 JS로 서버에게 요청을 하게되는데,
JS로 요청하게 되면, 쿠키는 기본적인 정책이 뭐냐면,
동일 도메인에서만 요청이 올 때 발동을 한다.

그래서 어떤 방법이 있냐면,
header에 Authorization이라는 키 값에 어떤 인증 정보를 넣고 가는 방식
ID, PW를 담아 넘김
이것이 http Basic방식.
이러게 요청을 하면, 매번 요청할 때 마다 ID,PW를 달고 요청을 한다.
이렇게 되면, 요청마다 계속 인증을 하니 쿠키,세션을 만들 필요가 없음!!
이렇게 되면, 확정성은 좋은데, 이 ID,PW가 암호화가 안되기 때문에 중간에 노출이 될 수 O
그럼 이것이 노출이 안되게 하려면,
서버를 https 서버를 사용해야한다.(http서버는 데이터가 암호화가 안됨)
https서버를 쓰면, 이 ID,PW가 암호화 되어 날라간다.
 <= 이것이 [Http Basic 방식]이고

 ⭐우리의 방식은
 Authorization에 뭘 넣는 거냐면, 토큰을 넣는 방식이다.
 이 토큰은 노출이 된다고 하더라고 토큰 자체가 ID,PW가 아니기에 위험 부담이 조금 적어지긴 함
 ID,PW를 통해 토큰을 만드는 것. 그래서 이 토큰을 달고 요청을 하는 것이 [Bearer방식]

 만약 토큰이 노출이 되면,
 ID,PW로 로그인 할 때 마다 서버쪽에서 다시 만들어 줄 것이므로, 한 번 노출됐다고 위험하지는 않는데,
 ID,PW는 노출되면 바꾸지 않고서는 계속 뚫림

 Token은 유효시간이 있어서 특정시간이 지나면 노출되고 토큰을 가지고 있어도 로그인 못함.
 확실히 Http Basic 방식보다 Bearer방식이 안전하다!!

 여기서,
 이 토큰을 만들 때 JWT을 만든다.
 이 방식을 사용할 것이기 때문에!! 세션도 안쓸거고~ 기본인증방식도 안쓸거고~~ 나는 베리어 방식을 쓸거다. 라고 비활성화해야함!!!